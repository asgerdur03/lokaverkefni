Project
This is the last assignment. Next week, the project work starts. Start already now to think
about a suitable project (e.g. a project that you did in another course — if you have no good
idea: continue with the simple library management software from Assignment 8 as business
logic, extend it as needed and add a user interface, a textual user interface is sufficient).
Your project needs to use what the weekly assignments covered:

• Git (Chapter 2/Assignment 2): simply use Git – in case of teamwork, Helmut wants to
see both students committing.
• Maven (Chapter 4/Assignment 4): Use Maven project layout, support goals: compile,
test, exec:java, package, site
• JUnit (Chapter 5/Assignment 5): we did not cover how to test user interfaces, so no
need to test the UI, but you can test classes/the business logic behind the user interface.
• UML design (Chapter 8 & 10/Assignment 8 & 10): create a class diagram (note that
UMLet cannot read in enum types, create them on your own using the «enumeration»
stereotype).
• Design patterns (Chapter 9/Assignment 9): e.g. a GUI typically uses the observer
patterns to observe the business objects using listeners or even handler; the library
system could introduce the concept of an omnibus, i.e. a book divided into multiple
volumes collected together in a box, and borrowing an omnibus would forward the
borrowing as well to its children; even patterns not covered in the course can be used.
• Refactoring to achieve self-explaining code (Chapter 6/Assignment 6): Helmut will not
notice if you applied refactoring, but he will notice if you did not! E.g. if you have bad
method names (naming conventions are referenced in Chapter 10, but most students
learned already last semester about Java naming conventions).
• Package a jar file and provide a command so that an end user without an IDE or Maven
can run your program (Chapter 3/Assignment 3 & 4): for running, you either need to
add for each dependency a separate jar file or let Maven create a fat jar that contains
all dependencies using the maven-assembly-plugin (do some web search as this was
not covered in this course).
• Documentation (Chapter 10/Assignment 10): README, license, more detailed documentation (markdown) with, e.g., the UML class diagram, but also mention where a
pattern is used, but also some end-user documentation, e.g., on how to run your jar.